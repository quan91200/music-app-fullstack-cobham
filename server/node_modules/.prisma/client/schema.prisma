datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  name          String
  role          UserRole       @default(USER) // Phân quyền cho người dùng (USER hoặc ADMIN)
  userType      UserType       @default(REGULAR) // Phân loại người dùng (thường hay cấp cao)
  playlists     Playlist[] // Một người dùng có thể có nhiều playlist
  songs         Song[] // Mỗi người dùng có thể đăng nhiều bài hát
  createdAt     DateTime       @default(now())
  payments      Payment[] // Mỗi người dùng có thể có nhiều lần thanh toán
  subscriptions Subscription[] // Liên kết với bảng đăng ký
  // Mối quan hệ đối ứng với quan hệ "user" trong Friend (người dùng có thể có nhiều bạn bè)
  friends       Friend[]       @relation("UserFriendship")

  // Mối quan hệ đối ứng với quan hệ "friend" trong Friend (người dùng có thể là bạn của nhiều người)
  friendOf Friend[] @relation("FriendFriendship")
}

model Payment {
  id            Int           @id @default(autoincrement())
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  amount        Float // Số tiền thanh toán
  paymentDate   DateTime      @default(now()) // Thời gian thanh toán
  status        PaymentStatus // Trạng thái thanh toán (thành công, thất bại, v.v.)
  paymentMethod String // Phương thức thanh toán (thẻ tín dụng, PayPal, v.v.)
}

model Subscription {
  id                 Int                @id @default(autoincrement())
  userId             Int
  user               User               @relation(fields: [userId], references: [id])
  plan               SubscriptionPlan // Gói đăng ký (Regular, Premium 1, Premium 2, v.v.)
  startDate          DateTime           @default(now())
  endDate            DateTime
  isActive           Boolean            @default(true)
  subscriptionPeriod SubscriptionPeriod // Thời gian chu kỳ đăng ký (Ngày, Tuần, Tháng, Năm)
}

enum PaymentStatus {
  SUCCESS // Hoàn thành thanh toán
  FAILED // Chưa hoàn thành thanh toán
  PENDING // Chờ thanh toán
}

enum SubscriptionPeriod {
  DAY
  WEEK
  MONTH
  YEAR
}

enum SubscriptionPlan {
  REGULAR // Người dùng thường
  PREMIUM_1 // Premium loại 1
  PREMIUM_2 // Premium loại 2
  PREMIUM_UNLIMITED // Premium không giới hạn
}

model Song {
  id        Int        @id @default(autoincrement())
  title     String
  duration  Int // Duration in seconds
  artistId  Int
  artist    Artist     @relation(fields: [artistId], references: [id])
  albumId   Int
  album     Album      @relation(fields: [albumId], references: [id])
  userId    Int // Liên kết bài hát với người dùng
  user      User       @relation(fields: [userId], references: [id]) // Liên kết ngược về User
  createdAt DateTime   @default(now())
  playlists Playlist[] @relation("PlaylistSongs") // Trường đối ứng với mối quan hệ Playlist
}

enum UserRole {
  USER // Người dùng thường
  ADMIN // Quản trị viên
}

enum UserType {
  REGULAR // Người dùng loại thường
  PREMIUM_1 // Người dùng cấp cao loại 1 (10 bài hát)
  PREMIUM_2 // Người dùng cấp cao loại 2 (20 bài hát)
  PREMIUM_UNLIMITED // Người dùng cấp cao loại 3 (không giới hạn)
}

model Playlist {
  id        Int             @id @default(autoincrement())
  name      String
  userId    Int
  user      User            @relation(fields: [userId], references: [id])
  songs     Song[]          @relation("PlaylistSongs")
  createdAt DateTime        @default(now())
  privacy   PlaylistPrivacy @default(PRIVATE) // Quyền riêng tư của playlist
}

model Artist {
  id        Int      @id @default(autoincrement())
  name      String
  songs     Song[]
  createdAt DateTime @default(now())
  Album     Album[]
}

model Album {
  id        Int      @id @default(autoincrement())
  name      String
  artistId  Int
  artist    Artist   @relation(fields: [artistId], references: [id])
  songs     Song[]
  createdAt DateTime @default(now())
}

model Friend {
  id        Int      @id @default(autoincrement())
  userId    Int
  friendId  Int
  user      User     @relation("UserFriendship", fields: [userId], references: [id])
  friend    User     @relation("FriendFriendship", fields: [friendId], references: [id])
  createdAt DateTime @default(now())
}

enum PlaylistPrivacy {
  PUBLIC // Mọi người có thể xem
  FRIEND // Bạn bè có thể xem
  PRIVATE // Chỉ bản thân người dùng có thể xem
}
